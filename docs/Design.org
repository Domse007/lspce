#+STARTUP: overview 
#+STARTUP: hidestars
#+STARTUP: hideblocks

* test
  #+BEGIN_SRC elisp
    (add-to-list 'load-path "/mnt/Personal/VCS/bitbucket/lspce/rs/target/debug")

    (require 'lspce)

    (lspce-say-hello "Emacs")
    (lspce-echo "Hello Emacs")

  #+END_SRC

* subprocess and stdin/stdout
  启动LSP Server进程后，要能够通过stdin输入、从stdout获取输出。
  #+BEGIN_SRC rust
    use std::process::{Command, Stdio};
    use std::io::Write;

    let mut child = Command::new("/bin/cat")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("failed to execute child");

    // If the child process fills its stdout buffer, it may end up
    // waiting until the parent reads the stdout, and not be able to
    // read stdin in the meantime, causing a deadlock.
    // Writing from another thread ensures that stdout is being read
    // at the same time, avoiding the problem.
    let mut stdin = child.stdin.take().expect("failed to get stdin");
    std::thread::spawn(move || {
        stdin.write_all(b"test").expect("failed to write to stdin");
    });

    let output = child
        .wait_with_output()
        .expect("failed to wait on child");

    assert_eq!(b"test", output.stdout.as_slice());
  #+END_SRC

* LSP and its lifetime
** 请求
   每个请求都必须要有响应。
** 通知
   通知一定不能有响应。
** initialize 请求
   Client发送到Server的 _第一个_ 请求。在Server返回InitializeResult之前，client不能发送任何请求/通知给server。
   Server处理initialize请求期间，只能发送通知 ~window/showMessage~, ~window/logMessage~, ~telemetry/event~ 或者请求 ~window/showMessageRequest~ 给client。
** initialized 通知
   Client收到server的InitializeResult响应之后，发送其它任何请求/通知给server之前，发送给server的。
** shutdown 请求
   Client发送给server，要求server =shut down=, 但不要 =exit=. 否则这个请求的响应就没法发送给client了。
   此后，client就只能发送 ~exit~ 通知给server了，而且要在收到shutdown响应之后。
** exit 通知
   请求server结束其进程。

* Emacs如何跟LSP Server进程通信

* jsonrpc

* 支持TCP/HTTP

